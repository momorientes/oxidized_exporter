#!/usr/bin/env python3

import configparser
import time

import requests
from prometheus_client import REGISTRY, Metric, start_http_server


class OxidizedCollector(object):
    def __init__(self, oxidized_url):
        self.oxidized_url = oxidized_url

    def collect(self):
        response = requests.get(self.oxidized_url + "/nodes.json").json()
        metric = Metric("oxidized_status", "Most recent oxidized status", "gauge")
        for node in response:
            status = 1 if node["status"] == "success" else 0
            metric.add_sample(
                "oxidized_status", value=status, labels={config["default"]["label"]: node["name"]}
            )

        yield metric


if __name__ == "__main__":
    config = configparser.ConfigParser()
    config.read("oxidized.conf")
    REGISTRY.register(OxidizedCollector(config["default"]["url"]))
    print("Starting oxidized_exporter")
    start_http_server(
        addr=config["default"]["addr"], port=int(config["default"]["port"])
    )
    print(f"Listening on {config['default']['addr']}:{config['default']['port']}")

    while True:
        time.sleep(1)
